/*
 * SaaS fulfillment APIs, version 2
 * This spec details the APIs that enable partners to sell their SaaS applications in the AppSource marketplace and the Azure Marketplace. These APIs are a requirement for transactable SaaS offers on the AppSource and Azure Marketplace.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.microsoft.azure.marketplace;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
/**
 * ErrorErrorAdditionalInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-19T20:04:00.284-07:00[America/Los_Angeles]")
public class ErrorErrorAdditionalInfo {
  @SerializedName("usageEventId")
  private UUID usageEventId = null;

  /**
   * Accepted|NotProcessed|Expired
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACCEPTED("Accepted"),
    NOTPROCESSED("NotProcessed"),
    EXPIRED("Expired");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("messageTime")
  private OffsetDateTime messageTime = null;

  @SerializedName("resourceId")
  private UUID resourceId = null;

  @SerializedName("quantity")
  private Long quantity = null;

  @SerializedName("dimension")
  private String dimension = null;

  @SerializedName("effectiveStartTime")
  private OffsetDateTime effectiveStartTime = null;

  @SerializedName("planId")
  private UUID planId = null;

  public ErrorErrorAdditionalInfo usageEventId(UUID usageEventId) {
    this.usageEventId = usageEventId;
    return this;
  }

   /**
   * Unique identifier associated with the usage event
   * @return usageEventId
  **/
  @Schema(description = "Unique identifier associated with the usage event")
  public UUID getUsageEventId() {
    return usageEventId;
  }

  public void setUsageEventId(UUID usageEventId) {
    this.usageEventId = usageEventId;
  }

  public ErrorErrorAdditionalInfo status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Accepted|NotProcessed|Expired
   * @return status
  **/
  @Schema(description = "Accepted|NotProcessed|Expired")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ErrorErrorAdditionalInfo messageTime(OffsetDateTime messageTime) {
    this.messageTime = messageTime;
    return this;
  }

   /**
   * Time this message was created in UTC
   * @return messageTime
  **/
  @Schema(description = "Time this message was created in UTC")
  public OffsetDateTime getMessageTime() {
    return messageTime;
  }

  public void setMessageTime(OffsetDateTime messageTime) {
    this.messageTime = messageTime;
  }

  public ErrorErrorAdditionalInfo resourceId(UUID resourceId) {
    this.resourceId = resourceId;
    return this;
  }

   /**
   * Identifier of the resource against which usage is emitted
   * @return resourceId
  **/
  @Schema(description = "Identifier of the resource against which usage is emitted")
  public UUID getResourceId() {
    return resourceId;
  }

  public void setResourceId(UUID resourceId) {
    this.resourceId = resourceId;
  }

  public ErrorErrorAdditionalInfo quantity(Long quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @Schema(description = "")
  public Long getQuantity() {
    return quantity;
  }

  public void setQuantity(Long quantity) {
    this.quantity = quantity;
  }

  public ErrorErrorAdditionalInfo dimension(String dimension) {
    this.dimension = dimension;
    return this;
  }

   /**
   * Dimension identifier
   * @return dimension
  **/
  @Schema(description = "Dimension identifier")
  public String getDimension() {
    return dimension;
  }

  public void setDimension(String dimension) {
    this.dimension = dimension;
  }

  public ErrorErrorAdditionalInfo effectiveStartTime(OffsetDateTime effectiveStartTime) {
    this.effectiveStartTime = effectiveStartTime;
    return this;
  }

   /**
   * Time in UTC when the usage event occurred
   * @return effectiveStartTime
  **/
  @Schema(description = "Time in UTC when the usage event occurred")
  public OffsetDateTime getEffectiveStartTime() {
    return effectiveStartTime;
  }

  public void setEffectiveStartTime(OffsetDateTime effectiveStartTime) {
    this.effectiveStartTime = effectiveStartTime;
  }

  public ErrorErrorAdditionalInfo planId(UUID planId) {
    this.planId = planId;
    return this;
  }

   /**
   * Plan associated with the purchased offer
   * @return planId
  **/
  @Schema(description = "Plan associated with the purchased offer")
  public UUID getPlanId() {
    return planId;
  }

  public void setPlanId(UUID planId) {
    this.planId = planId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorErrorAdditionalInfo errorErrorAdditionalInfo = (ErrorErrorAdditionalInfo) o;
    return Objects.equals(this.usageEventId, errorErrorAdditionalInfo.usageEventId) &&
        Objects.equals(this.status, errorErrorAdditionalInfo.status) &&
        Objects.equals(this.messageTime, errorErrorAdditionalInfo.messageTime) &&
        Objects.equals(this.resourceId, errorErrorAdditionalInfo.resourceId) &&
        Objects.equals(this.quantity, errorErrorAdditionalInfo.quantity) &&
        Objects.equals(this.dimension, errorErrorAdditionalInfo.dimension) &&
        Objects.equals(this.effectiveStartTime, errorErrorAdditionalInfo.effectiveStartTime) &&
        Objects.equals(this.planId, errorErrorAdditionalInfo.planId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usageEventId, status, messageTime, resourceId, quantity, dimension, effectiveStartTime, planId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorErrorAdditionalInfo {\n");
    
    sb.append("    usageEventId: ").append(toIndentedString(usageEventId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    messageTime: ").append(toIndentedString(messageTime)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    effectiveStartTime: ").append(toIndentedString(effectiveStartTime)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
