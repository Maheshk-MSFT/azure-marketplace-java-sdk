/*
 * SaaS fulfillment APIs, version 2
 * This spec details the APIs that enable partners to sell their SaaS applications in the AppSource marketplace and the Azure Marketplace. These APIs are a requirement for transactable SaaS offers on the AppSource and Azure Marketplace.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.microsoft.azure.marketplace.generated;

import com.microsoft.azure.marketplace.ApiCallback;
import com.microsoft.azure.marketplace.ApiClient;
import com.microsoft.azure.marketplace.ApiException;
import com.microsoft.azure.marketplace.ApiResponse;
import com.microsoft.azure.marketplace.Configuration;
import com.microsoft.azure.marketplace.Pair;
import com.microsoft.azure.marketplace.ProgressRequestBody;
import com.microsoft.azure.marketplace.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.microsoft.azure.marketplace.ApiVersion;
import com.microsoft.azure.marketplace.Error;
import java.util.UUID;
import com.microsoft.azure.marketplace.UsageEvent;
import com.microsoft.azure.marketplace.UsageEventOkResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SaasMarketplaceMeterApi {
    private ApiClient apiClient;

    public SaasMarketplaceMeterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SaasMarketplaceMeterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for postBatchUsageEvent
     * @param body  (required)
     * @param apiVersion Version of the API. (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postBatchUsageEventCall(List<UsageEvent> body, ApiVersion apiVersion, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/batchUsageEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMsRequestid != null)
        localVarHeaderParams.put("x-ms-requestid", apiClient.parameterToString(xMsRequestid));
        if (xMsCorrelationid != null)
        localVarHeaderParams.put("x-ms-correlationid", apiClient.parameterToString(xMsCorrelationid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postBatchUsageEventValidateBeforeCall(List<UsageEvent> body, ApiVersion apiVersion, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postBatchUsageEvent(Async)");
        }
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling postBatchUsageEvent(Async)");
        }
        
        com.squareup.okhttp.Call call = postBatchUsageEventCall(body, apiVersion, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Posts a set of usage events to the marketplace metering service API.
     * The batch usage event API allows you to emit usage events for more than one purchased entity at once. The batch usage event request references the metering services dimension defined by the publisher when publishing the offer.
     * @param body  (required)
     * @param apiVersion Version of the API. (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return UsageEventOkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UsageEventOkResponse postBatchUsageEvent(List<UsageEvent> body, ApiVersion apiVersion, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        ApiResponse<UsageEventOkResponse> resp = postBatchUsageEventWithHttpInfo(body, apiVersion, xMsRequestid, xMsCorrelationid);
        return resp.getData();
    }

    /**
     * Posts a set of usage events to the marketplace metering service API.
     * The batch usage event API allows you to emit usage events for more than one purchased entity at once. The batch usage event request references the metering services dimension defined by the publisher when publishing the offer.
     * @param body  (required)
     * @param apiVersion Version of the API. (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return ApiResponse&lt;UsageEventOkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UsageEventOkResponse> postBatchUsageEventWithHttpInfo(List<UsageEvent> body, ApiVersion apiVersion, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        com.squareup.okhttp.Call call = postBatchUsageEventValidateBeforeCall(body, apiVersion, xMsRequestid, xMsCorrelationid, null, null);
        Type localVarReturnType = new TypeToken<UsageEventOkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Posts a set of usage events to the marketplace metering service API. (asynchronously)
     * The batch usage event API allows you to emit usage events for more than one purchased entity at once. The batch usage event request references the metering services dimension defined by the publisher when publishing the offer.
     * @param body  (required)
     * @param apiVersion Version of the API. (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postBatchUsageEventAsync(List<UsageEvent> body, ApiVersion apiVersion, UUID xMsRequestid, UUID xMsCorrelationid, final ApiCallback<UsageEventOkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postBatchUsageEventValidateBeforeCall(body, apiVersion, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UsageEventOkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postUsageEvent
     * @param body  (required)
     * @param apiVersion Version of the API. (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postUsageEventCall(List<UsageEvent> body, ApiVersion apiVersion, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/usageEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMsRequestid != null)
        localVarHeaderParams.put("x-ms-requestid", apiClient.parameterToString(xMsRequestid));
        if (xMsCorrelationid != null)
        localVarHeaderParams.put("x-ms-correlationid", apiClient.parameterToString(xMsCorrelationid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postUsageEventValidateBeforeCall(List<UsageEvent> body, ApiVersion apiVersion, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postUsageEvent(Async)");
        }
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling postUsageEvent(Async)");
        }
        
        com.squareup.okhttp.Call call = postUsageEventCall(body, apiVersion, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Posts a single usage event to the marketplace metering service API.
     * Posts a single usage event to the marketplace metering service API.
     * @param body  (required)
     * @param apiVersion Version of the API. (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return UsageEventOkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UsageEventOkResponse postUsageEvent(List<UsageEvent> body, ApiVersion apiVersion, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        ApiResponse<UsageEventOkResponse> resp = postUsageEventWithHttpInfo(body, apiVersion, xMsRequestid, xMsCorrelationid);
        return resp.getData();
    }

    /**
     * Posts a single usage event to the marketplace metering service API.
     * Posts a single usage event to the marketplace metering service API.
     * @param body  (required)
     * @param apiVersion Version of the API. (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return ApiResponse&lt;UsageEventOkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UsageEventOkResponse> postUsageEventWithHttpInfo(List<UsageEvent> body, ApiVersion apiVersion, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        com.squareup.okhttp.Call call = postUsageEventValidateBeforeCall(body, apiVersion, xMsRequestid, xMsCorrelationid, null, null);
        Type localVarReturnType = new TypeToken<UsageEventOkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Posts a single usage event to the marketplace metering service API. (asynchronously)
     * Posts a single usage event to the marketplace metering service API.
     * @param body  (required)
     * @param apiVersion Version of the API. (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postUsageEventAsync(List<UsageEvent> body, ApiVersion apiVersion, UUID xMsRequestid, UUID xMsCorrelationid, final ApiCallback<UsageEventOkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postUsageEventValidateBeforeCall(body, apiVersion, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UsageEventOkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
