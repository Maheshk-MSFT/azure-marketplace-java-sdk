/*
 * SaaS fulfillment APIs, version 2
 * This spec details the APIs that enable partners to sell their SaaS applications in the AppSource marketplace and the Azure Marketplace. These APIs are a requirement for transactable SaaS offers on the AppSource and Azure Marketplace.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.microsoft.azure.marketplace.generated;

import com.microsoft.azure.marketplace.ApiCallback;
import com.microsoft.azure.marketplace.ApiClient;
import com.microsoft.azure.marketplace.ApiException;
import com.microsoft.azure.marketplace.ApiResponse;
import com.microsoft.azure.marketplace.Configuration;
import com.microsoft.azure.marketplace.Pair;
import com.microsoft.azure.marketplace.ProgressRequestBody;
import com.microsoft.azure.marketplace.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.microsoft.azure.marketplace.ApiVersion;
import com.microsoft.azure.marketplace.Error;
import com.microsoft.azure.marketplace.OperationList;
import com.microsoft.azure.marketplace.OperationType;
import com.microsoft.azure.marketplace.PlansResponse;
import com.microsoft.azure.marketplace.SubscriberPlan;
import com.microsoft.azure.marketplace.Subscription;
import com.microsoft.azure.marketplace.SubscriptionSummary;
import com.microsoft.azure.marketplace.SubscriptionsResponse;
import java.util.UUID;
import com.microsoft.azure.marketplace.UpdateOperation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SaasFulfillmentApi {
    private ApiClient apiClient;

    public SaasFulfillmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SaasFulfillmentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for activateSubscription
     * @param body  (required)
     * @param contentType application/json (required)
     * @param apiVersion Version of the API. (required)
     * @param subscriptionId  (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call activateSubscriptionCall(SubscriberPlan body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/saas/subscriptions/{subscriptionId}/activate"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (xMsRequestid != null)
        localVarHeaderParams.put("x-ms-requestid", apiClient.parameterToString(xMsRequestid));
        if (xMsCorrelationid != null)
        localVarHeaderParams.put("x-ms-correlationid", apiClient.parameterToString(xMsCorrelationid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call activateSubscriptionValidateBeforeCall(SubscriberPlan body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling activateSubscription(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling activateSubscription(Async)");
        }
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling activateSubscription(Async)");
        }
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling activateSubscription(Async)");
        }
        
        com.squareup.okhttp.Call call = activateSubscriptionCall(body, contentType, apiVersion, subscriptionId, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Activate a subscription
     * Use this call to activate a subscription.
     * @param body  (required)
     * @param contentType application/json (required)
     * @param apiVersion Version of the API. (required)
     * @param subscriptionId  (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void activateSubscription(SubscriberPlan body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        activateSubscriptionWithHttpInfo(body, contentType, apiVersion, subscriptionId, xMsRequestid, xMsCorrelationid);
    }

    /**
     * Activate a subscription
     * Use this call to activate a subscription.
     * @param body  (required)
     * @param contentType application/json (required)
     * @param apiVersion Version of the API. (required)
     * @param subscriptionId  (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> activateSubscriptionWithHttpInfo(SubscriberPlan body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        com.squareup.okhttp.Call call = activateSubscriptionValidateBeforeCall(body, contentType, apiVersion, subscriptionId, xMsRequestid, xMsCorrelationid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Activate a subscription (asynchronously)
     * Use this call to activate a subscription.
     * @param body  (required)
     * @param contentType application/json (required)
     * @param apiVersion Version of the API. (required)
     * @param subscriptionId  (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call activateSubscriptionAsync(SubscriberPlan body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = activateSubscriptionValidateBeforeCall(body, contentType, apiVersion, subscriptionId, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSubscription
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSubscriptionCall(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/saas/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (xMsRequestid != null)
        localVarHeaderParams.put("x-ms-requestid", apiClient.parameterToString(xMsRequestid));
        if (xMsCorrelationid != null)
        localVarHeaderParams.put("x-ms-correlationid", apiClient.parameterToString(xMsCorrelationid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSubscriptionValidateBeforeCall(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deleteSubscription(Async)");
        }
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteSubscription(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteSubscription(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSubscriptionCall(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a subscription
     * Unsubscribe and delete the specified subscription.
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSubscription(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        deleteSubscriptionWithHttpInfo(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid);
    }

    /**
     * Delete a subscription
     * Unsubscribe and delete the specified subscription.
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSubscriptionWithHttpInfo(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubscriptionValidateBeforeCall(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a subscription (asynchronously)
     * Unsubscribe and delete the specified subscription.
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubscriptionAsync(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubscriptionValidateBeforeCall(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getOperationStatus
     * @param subscriptionId  (required)
     * @param operationId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOperationStatusCall(UUID subscriptionId, UUID operationId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/saas/subscriptions/{subscriptionId}/operations/{operationId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()))
            .replaceAll("\\{" + "operationId" + "\\}", apiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (xMsRequestid != null)
        localVarHeaderParams.put("x-ms-requestid", apiClient.parameterToString(xMsRequestid));
        if (xMsCorrelationid != null)
        localVarHeaderParams.put("x-ms-correlationid", apiClient.parameterToString(xMsCorrelationid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOperationStatusValidateBeforeCall(UUID subscriptionId, UUID operationId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getOperationStatus(Async)");
        }
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling getOperationStatus(Async)");
        }
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getOperationStatus(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getOperationStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getOperationStatusCall(subscriptionId, operationId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get operation status
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     * @param subscriptionId  (required)
     * @param operationId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return OperationType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OperationType getOperationStatus(UUID subscriptionId, UUID operationId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        ApiResponse<OperationType> resp = getOperationStatusWithHttpInfo(subscriptionId, operationId, apiVersion, contentType, xMsRequestid, xMsCorrelationid);
        return resp.getData();
    }

    /**
     * Get operation status
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     * @param subscriptionId  (required)
     * @param operationId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return ApiResponse&lt;OperationType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OperationType> getOperationStatusWithHttpInfo(UUID subscriptionId, UUID operationId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        com.squareup.okhttp.Call call = getOperationStatusValidateBeforeCall(subscriptionId, operationId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, null, null);
        Type localVarReturnType = new TypeToken<OperationType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get operation status (asynchronously)
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     * @param subscriptionId  (required)
     * @param operationId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOperationStatusAsync(UUID subscriptionId, UUID operationId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ApiCallback<OperationType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOperationStatusValidateBeforeCall(subscriptionId, operationId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OperationType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSubscription
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubscriptionCall(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/saas/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (xMsRequestid != null)
        localVarHeaderParams.put("x-ms-requestid", apiClient.parameterToString(xMsRequestid));
        if (xMsCorrelationid != null)
        localVarHeaderParams.put("x-ms-correlationid", apiClient.parameterToString(xMsCorrelationid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubscriptionValidateBeforeCall(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getSubscription(Async)");
        }
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getSubscription(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getSubscription(Async)");
        }
        
        com.squareup.okhttp.Call call = getSubscriptionCall(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get subscription
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Subscription getSubscription(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        ApiResponse<Subscription> resp = getSubscriptionWithHttpInfo(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid);
        return resp.getData();
    }

    /**
     * Get subscription
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Subscription> getSubscriptionWithHttpInfo(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        com.squareup.okhttp.Call call = getSubscriptionValidateBeforeCall(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, null, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get subscription (asynchronously)
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubscriptionAsync(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ApiCallback<Subscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubscriptionValidateBeforeCall(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAvailablePlans
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAvailablePlansCall(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/saas/subscriptions/{subscriptionId}/listAvailablePlans"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (xMsRequestid != null)
        localVarHeaderParams.put("x-ms-requestid", apiClient.parameterToString(xMsRequestid));
        if (xMsCorrelationid != null)
        localVarHeaderParams.put("x-ms-correlationid", apiClient.parameterToString(xMsCorrelationid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAvailablePlansValidateBeforeCall(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling listAvailablePlans(Async)");
        }
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling listAvailablePlans(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listAvailablePlans(Async)");
        }
        
        com.squareup.okhttp.Call call = listAvailablePlansCall(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List available plans
     * Use this call to find out if there are any private or public offers for the current publisher.
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return PlansResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlansResponse listAvailablePlans(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        ApiResponse<PlansResponse> resp = listAvailablePlansWithHttpInfo(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid);
        return resp.getData();
    }

    /**
     * List available plans
     * Use this call to find out if there are any private or public offers for the current publisher.
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return ApiResponse&lt;PlansResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlansResponse> listAvailablePlansWithHttpInfo(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        com.squareup.okhttp.Call call = listAvailablePlansValidateBeforeCall(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, null, null);
        Type localVarReturnType = new TypeToken<PlansResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List available plans (asynchronously)
     * Use this call to find out if there are any private or public offers for the current publisher.
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAvailablePlansAsync(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ApiCallback<PlansResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAvailablePlansValidateBeforeCall(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlansResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listOperations
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listOperationsCall(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/saas/subscriptions/{subscriptionId}/operations"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (xMsRequestid != null)
        localVarHeaderParams.put("x-ms-requestid", apiClient.parameterToString(xMsRequestid));
        if (xMsCorrelationid != null)
        localVarHeaderParams.put("x-ms-correlationid", apiClient.parameterToString(xMsCorrelationid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listOperationsValidateBeforeCall(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling listOperations(Async)");
        }
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling listOperations(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listOperations(Async)");
        }
        
        com.squareup.okhttp.Call call = listOperationsCall(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List outstanding operations
     * Lists the outstanding operations for the current publisher.
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return OperationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OperationList listOperations(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        ApiResponse<OperationList> resp = listOperationsWithHttpInfo(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid);
        return resp.getData();
    }

    /**
     * List outstanding operations
     * Lists the outstanding operations for the current publisher.
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return ApiResponse&lt;OperationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OperationList> listOperationsWithHttpInfo(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        com.squareup.okhttp.Call call = listOperationsValidateBeforeCall(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, null, null);
        Type localVarReturnType = new TypeToken<OperationList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List outstanding operations (asynchronously)
     * Lists the outstanding operations for the current publisher.
     * @param subscriptionId  (required)
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOperationsAsync(UUID subscriptionId, ApiVersion apiVersion, String contentType, UUID xMsRequestid, UUID xMsCorrelationid, final ApiCallback<OperationList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOperationsValidateBeforeCall(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OperationList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSubscriptions
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param continuationToken Optional value, only used for ListSubscriptions. (optional)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSubscriptionsCall(ApiVersion apiVersion, String contentType, String continuationToken, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/saas/subscriptions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));
        if (continuationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("continuationToken", continuationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (xMsRequestid != null)
        localVarHeaderParams.put("x-ms-requestid", apiClient.parameterToString(xMsRequestid));
        if (xMsCorrelationid != null)
        localVarHeaderParams.put("x-ms-correlationid", apiClient.parameterToString(xMsCorrelationid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSubscriptionsValidateBeforeCall(ApiVersion apiVersion, String contentType, String continuationToken, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling listSubscriptions(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listSubscriptions(Async)");
        }
        
        com.squareup.okhttp.Call call = listSubscriptionsCall(apiVersion, contentType, continuationToken, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List subscriptions
     * Lists all the SaaS subscriptions for a publisher.
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param continuationToken Optional value, only used for ListSubscriptions. (optional)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return SubscriptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubscriptionsResponse listSubscriptions(ApiVersion apiVersion, String contentType, String continuationToken, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        ApiResponse<SubscriptionsResponse> resp = listSubscriptionsWithHttpInfo(apiVersion, contentType, continuationToken, xMsRequestid, xMsCorrelationid);
        return resp.getData();
    }

    /**
     * List subscriptions
     * Lists all the SaaS subscriptions for a publisher.
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param continuationToken Optional value, only used for ListSubscriptions. (optional)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return ApiResponse&lt;SubscriptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubscriptionsResponse> listSubscriptionsWithHttpInfo(ApiVersion apiVersion, String contentType, String continuationToken, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        com.squareup.okhttp.Call call = listSubscriptionsValidateBeforeCall(apiVersion, contentType, continuationToken, xMsRequestid, xMsCorrelationid, null, null);
        Type localVarReturnType = new TypeToken<SubscriptionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List subscriptions (asynchronously)
     * Lists all the SaaS subscriptions for a publisher.
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param continuationToken Optional value, only used for ListSubscriptions. (optional)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSubscriptionsAsync(ApiVersion apiVersion, String contentType, String continuationToken, UUID xMsRequestid, UUID xMsCorrelationid, final ApiCallback<SubscriptionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSubscriptionsValidateBeforeCall(apiVersion, contentType, continuationToken, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubscriptionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchSubscription
     * @param body  (required)
     * @param contentType application/json (required)
     * @param apiVersion Version of the API. (required)
     * @param subscriptionId  (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchSubscriptionCall(SubscriberPlan body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/saas/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (xMsRequestid != null)
        localVarHeaderParams.put("x-ms-requestid", apiClient.parameterToString(xMsRequestid));
        if (xMsCorrelationid != null)
        localVarHeaderParams.put("x-ms-correlationid", apiClient.parameterToString(xMsCorrelationid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchSubscriptionValidateBeforeCall(SubscriberPlan body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchSubscription(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling patchSubscription(Async)");
        }
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling patchSubscription(Async)");
        }
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling patchSubscription(Async)");
        }
        
        com.squareup.okhttp.Call call = patchSubscriptionCall(body, contentType, apiVersion, subscriptionId, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Patch a subscription
     * Use this call to update the plan, the user count (quantity), or both.
     * @param body  (required)
     * @param contentType application/json (required)
     * @param apiVersion Version of the API. (required)
     * @param subscriptionId  (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void patchSubscription(SubscriberPlan body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        patchSubscriptionWithHttpInfo(body, contentType, apiVersion, subscriptionId, xMsRequestid, xMsCorrelationid);
    }

    /**
     * Patch a subscription
     * Use this call to update the plan, the user count (quantity), or both.
     * @param body  (required)
     * @param contentType application/json (required)
     * @param apiVersion Version of the API. (required)
     * @param subscriptionId  (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> patchSubscriptionWithHttpInfo(SubscriberPlan body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        com.squareup.okhttp.Call call = patchSubscriptionValidateBeforeCall(body, contentType, apiVersion, subscriptionId, xMsRequestid, xMsCorrelationid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Patch a subscription (asynchronously)
     * Use this call to update the plan, the user count (quantity), or both.
     * @param body  (required)
     * @param contentType application/json (required)
     * @param apiVersion Version of the API. (required)
     * @param subscriptionId  (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchSubscriptionAsync(SubscriberPlan body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchSubscriptionValidateBeforeCall(body, contentType, apiVersion, subscriptionId, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for resolve
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner&#x27;s website from Azure (for example,  https://contoso.com/signup?token&#x3D;..). Note, The URL decodes the token value from the browser before using it. (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resolveCall(ApiVersion apiVersion, String contentType, String xMsMarketplaceToken, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/saas/subscriptions/resolve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (xMsRequestid != null)
        localVarHeaderParams.put("x-ms-requestid", apiClient.parameterToString(xMsRequestid));
        if (xMsCorrelationid != null)
        localVarHeaderParams.put("x-ms-correlationid", apiClient.parameterToString(xMsCorrelationid));
        if (xMsMarketplaceToken != null)
        localVarHeaderParams.put("x-ms-marketplace-token", apiClient.parameterToString(xMsMarketplaceToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resolveValidateBeforeCall(ApiVersion apiVersion, String contentType, String xMsMarketplaceToken, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resolve(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling resolve(Async)");
        }
        // verify the required parameter 'xMsMarketplaceToken' is set
        if (xMsMarketplaceToken == null) {
            throw new ApiException("Missing the required parameter 'xMsMarketplaceToken' when calling resolve(Async)");
        }
        
        com.squareup.okhttp.Call call = resolveCall(apiVersion, contentType, xMsMarketplaceToken, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resolve a subscription
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner&#x27;s website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner&#x27;s website from Azure (for example,  https://contoso.com/signup?token&#x3D;..). Note, The URL decodes the token value from the browser before using it. (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return SubscriptionSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubscriptionSummary resolve(ApiVersion apiVersion, String contentType, String xMsMarketplaceToken, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        ApiResponse<SubscriptionSummary> resp = resolveWithHttpInfo(apiVersion, contentType, xMsMarketplaceToken, xMsRequestid, xMsCorrelationid);
        return resp.getData();
    }

    /**
     * Resolve a subscription
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner&#x27;s website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner&#x27;s website from Azure (for example,  https://contoso.com/signup?token&#x3D;..). Note, The URL decodes the token value from the browser before using it. (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return ApiResponse&lt;SubscriptionSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubscriptionSummary> resolveWithHttpInfo(ApiVersion apiVersion, String contentType, String xMsMarketplaceToken, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        com.squareup.okhttp.Call call = resolveValidateBeforeCall(apiVersion, contentType, xMsMarketplaceToken, xMsRequestid, xMsCorrelationid, null, null);
        Type localVarReturnType = new TypeToken<SubscriptionSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resolve a subscription (asynchronously)
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner&#x27;s website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     * @param apiVersion Version of the API. (required)
     * @param contentType application/json (required)
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner&#x27;s website from Azure (for example,  https://contoso.com/signup?token&#x3D;..). Note, The URL decodes the token value from the browser before using it. (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resolveAsync(ApiVersion apiVersion, String contentType, String xMsMarketplaceToken, UUID xMsRequestid, UUID xMsCorrelationid, final ApiCallback<SubscriptionSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resolveValidateBeforeCall(apiVersion, contentType, xMsMarketplaceToken, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubscriptionSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOperationStatus
     * @param body  (required)
     * @param contentType application/json (required)
     * @param apiVersion Version of the API. (required)
     * @param subscriptionId  (required)
     * @param operationId  (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOperationStatusCall(UpdateOperation body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID operationId, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/saas/subscriptions/{subscriptionId}/operations/{operationId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()))
            .replaceAll("\\{" + "operationId" + "\\}", apiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (xMsRequestid != null)
        localVarHeaderParams.put("x-ms-requestid", apiClient.parameterToString(xMsRequestid));
        if (xMsCorrelationid != null)
        localVarHeaderParams.put("x-ms-correlationid", apiClient.parameterToString(xMsCorrelationid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOperationStatusValidateBeforeCall(UpdateOperation body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID operationId, UUID xMsRequestid, UUID xMsCorrelationid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOperationStatus(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateOperationStatus(Async)");
        }
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling updateOperationStatus(Async)");
        }
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateOperationStatus(Async)");
        }
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling updateOperationStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = updateOperationStatusCall(body, contentType, apiVersion, subscriptionId, operationId, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the status of an operation
     * Update the status of an operation to indicate success or failure with the provided values.
     * @param body  (required)
     * @param contentType application/json (required)
     * @param apiVersion Version of the API. (required)
     * @param subscriptionId  (required)
     * @param operationId  (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateOperationStatus(UpdateOperation body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID operationId, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        updateOperationStatusWithHttpInfo(body, contentType, apiVersion, subscriptionId, operationId, xMsRequestid, xMsCorrelationid);
    }

    /**
     * Update the status of an operation
     * Update the status of an operation to indicate success or failure with the provided values.
     * @param body  (required)
     * @param contentType application/json (required)
     * @param apiVersion Version of the API. (required)
     * @param subscriptionId  (required)
     * @param operationId  (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateOperationStatusWithHttpInfo(UpdateOperation body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID operationId, UUID xMsRequestid, UUID xMsCorrelationid) throws ApiException {
        com.squareup.okhttp.Call call = updateOperationStatusValidateBeforeCall(body, contentType, apiVersion, subscriptionId, operationId, xMsRequestid, xMsCorrelationid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the status of an operation (asynchronously)
     * Update the status of an operation to indicate success or failure with the provided values.
     * @param body  (required)
     * @param contentType application/json (required)
     * @param apiVersion Version of the API. (required)
     * @param subscriptionId  (required)
     * @param operationId  (required)
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&#x27;t provided, one will be generated and provided in the response headers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOperationStatusAsync(UpdateOperation body, String contentType, ApiVersion apiVersion, UUID subscriptionId, UUID operationId, UUID xMsRequestid, UUID xMsCorrelationid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOperationStatusValidateBeforeCall(body, contentType, apiVersion, subscriptionId, operationId, xMsRequestid, xMsCorrelationid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
