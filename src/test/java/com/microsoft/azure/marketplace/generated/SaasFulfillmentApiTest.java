/*
 * SaaS fulfillment APIs, version 2
 * This spec details the APIs that enable partners to sell their SaaS applications in the AppSource marketplace and the Azure Marketplace. These APIs are a requirement for transactable SaaS offers on the AppSource and Azure Marketplace.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.microsoft.azure.marketplace.generated;

import com.microsoft.azure.marketplace.ApiException;
import com.microsoft.azure.marketplace.ApiVersion;
import com.microsoft.azure.marketplace.Error;
import com.microsoft.azure.marketplace.OperationList;
import com.microsoft.azure.marketplace.OperationType;
import com.microsoft.azure.marketplace.PlansResponse;
import com.microsoft.azure.marketplace.SubscriberPlan;
import com.microsoft.azure.marketplace.Subscription;
import com.microsoft.azure.marketplace.SubscriptionSummary;
import com.microsoft.azure.marketplace.SubscriptionsResponse;
import java.util.UUID;
import com.microsoft.azure.marketplace.UpdateOperation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SaasFulfillmentApi
 */
@Ignore
public class SaasFulfillmentApiTest {

    private final SaasFulfillmentApi api = new SaasFulfillmentApi();

    /**
     * Activate a subscription
     *
     * Use this call to activate a subscription.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activateSubscriptionTest() throws ApiException {
        SubscriberPlan body = null;
        String contentType = null;
        ApiVersion apiVersion = null;
        UUID subscriptionId = null;
        UUID xMsRequestid = null;
        UUID xMsCorrelationid = null;
        api.activateSubscription(body, contentType, apiVersion, subscriptionId, xMsRequestid, xMsCorrelationid);

        // TODO: test validations
    }
    /**
     * Delete a subscription
     *
     * Unsubscribe and delete the specified subscription.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubscriptionTest() throws ApiException {
        UUID subscriptionId = null;
        ApiVersion apiVersion = null;
        String contentType = null;
        UUID xMsRequestid = null;
        UUID xMsCorrelationid = null;
        api.deleteSubscription(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid);

        // TODO: test validations
    }
    /**
     * Get operation status
     *
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOperationStatusTest() throws ApiException {
        UUID subscriptionId = null;
        UUID operationId = null;
        ApiVersion apiVersion = null;
        String contentType = null;
        UUID xMsRequestid = null;
        UUID xMsCorrelationid = null;
        OperationType response = api.getOperationStatus(subscriptionId, operationId, apiVersion, contentType, xMsRequestid, xMsCorrelationid);

        // TODO: test validations
    }
    /**
     * Get subscription
     *
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubscriptionTest() throws ApiException {
        UUID subscriptionId = null;
        ApiVersion apiVersion = null;
        String contentType = null;
        UUID xMsRequestid = null;
        UUID xMsCorrelationid = null;
        Subscription response = api.getSubscription(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid);

        // TODO: test validations
    }
    /**
     * List available plans
     *
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAvailablePlansTest() throws ApiException {
        UUID subscriptionId = null;
        ApiVersion apiVersion = null;
        String contentType = null;
        UUID xMsRequestid = null;
        UUID xMsCorrelationid = null;
        PlansResponse response = api.listAvailablePlans(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid);

        // TODO: test validations
    }
    /**
     * List outstanding operations
     *
     * Lists the outstanding operations for the current publisher.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperationsTest() throws ApiException {
        UUID subscriptionId = null;
        ApiVersion apiVersion = null;
        String contentType = null;
        UUID xMsRequestid = null;
        UUID xMsCorrelationid = null;
        OperationList response = api.listOperations(subscriptionId, apiVersion, contentType, xMsRequestid, xMsCorrelationid);

        // TODO: test validations
    }
    /**
     * List subscriptions
     *
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSubscriptionsTest() throws ApiException {
        ApiVersion apiVersion = null;
        String contentType = null;
        String continuationToken = null;
        UUID xMsRequestid = null;
        UUID xMsCorrelationid = null;
        SubscriptionsResponse response = api.listSubscriptions(apiVersion, contentType, continuationToken, xMsRequestid, xMsCorrelationid);

        // TODO: test validations
    }
    /**
     * Patch a subscription
     *
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchSubscriptionTest() throws ApiException {
        SubscriberPlan body = null;
        String contentType = null;
        ApiVersion apiVersion = null;
        UUID subscriptionId = null;
        UUID xMsRequestid = null;
        UUID xMsCorrelationid = null;
        api.patchSubscription(body, contentType, apiVersion, subscriptionId, xMsRequestid, xMsCorrelationid);

        // TODO: test validations
    }
    /**
     * Resolve a subscription
     *
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner&#x27;s website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resolveTest() throws ApiException {
        ApiVersion apiVersion = null;
        String contentType = null;
        String xMsMarketplaceToken = null;
        UUID xMsRequestid = null;
        UUID xMsCorrelationid = null;
        SubscriptionSummary response = api.resolve(apiVersion, contentType, xMsMarketplaceToken, xMsRequestid, xMsCorrelationid);

        // TODO: test validations
    }
    /**
     * Update the status of an operation
     *
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOperationStatusTest() throws ApiException {
        UpdateOperation body = null;
        String contentType = null;
        ApiVersion apiVersion = null;
        UUID subscriptionId = null;
        UUID operationId = null;
        UUID xMsRequestid = null;
        UUID xMsCorrelationid = null;
        api.updateOperationStatus(body, contentType, apiVersion, subscriptionId, operationId, xMsRequestid, xMsCorrelationid);

        // TODO: test validations
    }
}
